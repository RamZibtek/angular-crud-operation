{"ast":null,"code":"import { throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class ServiceService {\n  handleError(error) {\n    if (error.status === 422) {\n      // Handle 422 validation errors here\n      console.error(\"Validation error:\", error.error);\n    } else {\n      console.error(\"An error occurred:\", error.error);\n    }\n    // Return an observable with a user-friendly error message\n    return throwError(\"Something went wrong. Please try again later.\");\n  }\n  static #_ = this.ɵfac = function ServiceService_Factory(t) {\n    return new (t || ServiceService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ServiceService,\n    factory: ServiceService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["throwError","ServiceService","handleError","error","status","console","_","_2","factory","ɵfac","providedIn"],"sources":["/home/zibtek/Angular/angular-crud-operation/src/app/services/student.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ServiceService {\n  handleError(error: HttpErrorResponse) {\n    if (error.status === 422) {\n      // Handle 422 validation errors here\n      console.error(\"Validation error:\", error.error);\n    } else {\n      console.error(\"An error occurred:\", error.error);\n    }\n\n    // Return an observable with a user-friendly error message\n    return throwError(\"Something went wrong. Please try again later.\");\n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAAQ,MAAM;;AAKjC,OAAM,MAAOC,cAAc;EACzBC,WAAWA,CAACC,KAAwB;IAClC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;MACxB;MACAC,OAAO,CAACF,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACA,KAAK,CAAC;KAChD,MAAM;MACLE,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;;IAGlD;IACA,OAAOH,UAAU,CAAC,+CAA+C,CAAC;EACpE;EAAC,QAAAM,CAAA,G;qBAXUL,cAAc;EAAA;EAAA,QAAAM,EAAA,G;WAAdN,cAAc;IAAAO,OAAA,EAAdP,cAAc,CAAAQ,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}